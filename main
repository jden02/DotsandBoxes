from easyAI import TwoPlayersGame
from easyAI.Player import Human_Player

class DotsAndBoxes( TwoPlayersGame ):
    """ The board positions are numbered as follows:
        * 1 * 2 * 3 * 4 *
        5   6   7   8   9
        *10 *11 *12 *13 *
        14  15  16  17 18
        * 19 * 20 * 21 * 22 *
        23  24   25   26   27
        * 28 * 29 * 30 * 31 *
        32  33    34   35   36
        * 37 * 38 * 39 * 40 *

    """

    def __init__(self, players):
        self.players = players
        self.board = [0 for i in range(40)]
        self.nplayer = 1 # player 1 starts.
        print('init')

    def boxes(self):
        print('boxes')
        i = 1
        skip = [4,13,22]
        global boxArray
        boxArray = []
        while i <= ( 31 ):
            boxArray.append([i, i+4, i+5, i+9])
            if i in skip:
                i += 6
            else:
                i += 1
        return boxArray

    def display(self):
        print('display')
        global board
        board = []
        for i in range (5):
            board.append(['-','-','-','-'])
            board.append(['|','|','|','|','|'])
        board.append(['-','-','-','-'])
        for i in range (11):
            print board[i]

    def possible_moves(self):
        print('PossibleMoves')
        return [i+1 for i,e in enumerate(self.board) if e==0]
    
    def make_move(self, move):
        print('MakeMove')
        self.board[int(move)-1] = self.nplayer

    def unmake_move(self, move): # optional method (speeds up the AI)
        print('UnmakeMove')
        self.board[int(move)-1] = 0
    
    def lose(self):
        print('Lose')
        """ Has the opponent "three in line ?" """
        return any( [all([(self.board[c-1]== self.nopponent)
                      for c in line])
                      for line in [[1,2,3],[4,5,6],[7,8,9], # horiz.
                                   [1,4,7],[2,5,8],[3,6,9], # vertical
                                   [1,5,9],[3,5,7]]]) # diagonal
        
    def is_over(self):
        print('Over?')
        return (self.possible_moves() == [])
        
    def show(self):
        print('Show')
        self.display()
        self.boxes()
                 
    def scoring(self):
        print('Score')
        return -100 if self.lose() else 0
    

if __name__ == "__main__":

    from easyAI import AI_Player, Negamax
    ai_algo = Negamax(6)
    DotsAndBoxes( [Human_Player(),AI_Player(ai_algo)]).play()

'''TODO
* be able to move and change the virticle bars into Xs and Os
    * Change the Arrays whenever a move is made
* Scoring system
    * FOR loop to see if a box is made
    * After each persons turn
* Over needs to be changed so that it checks score for winner
'''
